#include <assert.h>
#include "antavore_definitions.h"

#pragma warning(push)
#pragma warning(disable : 4309)
#pragma warning(disable : 4838)

const char font[] = {
	// 'atari-font', 128x128px
	0x00, 0x18, 0x03, 0x18, 0x18, 0x00, 0x03, 0xc0, 0x01, 0x00, 0x80, 0x0f, 0xf0, 0xff, 0x00, 0x00,
	0x36, 0x18, 0x03, 0x18, 0x18, 0x00, 0x07, 0xe0, 0x03, 0x00, 0xc0, 0x0f, 0xf0, 0xff, 0x00, 0x00,
	0x7f, 0x18, 0x03, 0x18, 0x18, 0x00, 0x0e, 0x70, 0x07, 0x00, 0xe0, 0x0f, 0xf0, 0x00, 0x00, 0x00,
	0x7f, 0x1f, 0x03, 0xf8, 0xf8, 0xf8, 0x1c, 0x38, 0x0f, 0x00, 0xf0, 0x0f, 0xf0, 0x00, 0x00, 0x00,
	0x3e, 0x1f, 0x03, 0xf8, 0xf8, 0xf8, 0x38, 0x1c, 0x1f, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0xf0,
	0x1c, 0x18, 0x03, 0x00, 0x18, 0x18, 0x70, 0x0e, 0x3f, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xf0,
	0x08, 0x18, 0x03, 0x00, 0x18, 0x18, 0xe0, 0x07, 0x7f, 0x0f, 0xfe, 0x00, 0x00, 0x00, 0xff, 0xf0,
	0x00, 0x18, 0x03, 0x00, 0x18, 0x18, 0xc0, 0x03, 0xff, 0x0f, 0xff, 0x00, 0x00, 0x00, 0xff, 0xf0,
	0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0xc0, 0x00, 0x18, 0xf0, 0x18, 0x78, 0x00, 0x00, 0x00, 0x00,
	0x1c, 0x00, 0x00, 0x18, 0x00, 0x00, 0xc0, 0x00, 0x18, 0xf0, 0x18, 0x60, 0x18, 0x18, 0x18, 0x18,
	0x1c, 0x00, 0x00, 0x18, 0x3c, 0x00, 0xc0, 0x00, 0x18, 0xf0, 0x18, 0x78, 0x3c, 0x18, 0x30, 0x0c,
	0x77, 0x1f, 0xff, 0xff, 0x7e, 0x00, 0xc0, 0xff, 0xff, 0xf0, 0x1f, 0x60, 0x7e, 0x18, 0x7e, 0x7e,
	0x77, 0x1f, 0xff, 0xff, 0x7e, 0xff, 0xc0, 0xff, 0xff, 0xf0, 0x1f, 0x7e, 0x18, 0x7e, 0x30, 0x0c,
	0x08, 0x18, 0x00, 0x18, 0x7e, 0xff, 0xc0, 0x18, 0x00, 0xf0, 0x00, 0x18, 0x18, 0x3c, 0x18, 0x18,
	0x1c, 0x18, 0x00, 0x18, 0x3c, 0xff, 0xc0, 0x18, 0x00, 0xf0, 0x00, 0x1e, 0x18, 0x18, 0x00, 0x00,
	0x00, 0x18, 0x00, 0x18, 0x00, 0xff, 0xc0, 0x18, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x18, 0x66, 0x66, 0x3e, 0x66, 0x36, 0x18, 0x0e, 0x70, 0x66, 0x18, 0x00, 0x00, 0x00, 0x06,
	0x00, 0x18, 0x66, 0xff, 0x60, 0x6c, 0x1c, 0x18, 0x1c, 0x38, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x0c,
	0x00, 0x18, 0x66, 0x66, 0x3c, 0x18, 0x38, 0x18, 0x18, 0x18, 0xff, 0x7e, 0x00, 0x7e, 0x00, 0x18,
	0x00, 0x18, 0x00, 0x66, 0x06, 0x30, 0x6f, 0x00, 0x18, 0x18, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x30,
	0x00, 0x00, 0x00, 0xff, 0x7c, 0x66, 0x66, 0x00, 0x1c, 0x38, 0x66, 0x18, 0x18, 0x00, 0x18, 0x60,
	0x00, 0x18, 0x00, 0x66, 0x18, 0x46, 0x3b, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x18, 0x00, 0x18, 0x40,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x60, 0x00,
	0x3c, 0x18, 0x3c, 0x7e, 0x0c, 0x7e, 0x3c, 0x7e, 0x3c, 0x3c, 0x00, 0x00, 0x0c, 0x00, 0x30, 0x3c,
	0x66, 0x38, 0x66, 0x0c, 0x1c, 0x60, 0x60, 0x06, 0x66, 0x66, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x66,
	0x6e, 0x18, 0x0c, 0x18, 0x3c, 0x7c, 0x7c, 0x0c, 0x3c, 0x3e, 0x18, 0x18, 0x30, 0x00, 0x0c, 0x0c,
	0x76, 0x18, 0x18, 0x0c, 0x6c, 0x06, 0x66, 0x18, 0x66, 0x06, 0x00, 0x00, 0x18, 0x00, 0x18, 0x18,
	0x66, 0x18, 0x30, 0x66, 0x7e, 0x66, 0x66, 0x30, 0x66, 0x0c, 0x18, 0x18, 0x0c, 0x7e, 0x30, 0x00,
	0x3c, 0x7e, 0x7e, 0x3c, 0x0c, 0x3c, 0x3c, 0x30, 0x3c, 0x38, 0x18, 0x18, 0x06, 0x00, 0x60, 0x18,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x3c, 0x18, 0x7c, 0x3c, 0x78, 0x7e, 0x7e, 0x3e, 0x66, 0x7e, 0x06, 0x66, 0x60, 0x63, 0x66, 0x3c,
	0x66, 0x3c, 0x66, 0x66, 0x6c, 0x60, 0x60, 0x60, 0x66, 0x18, 0x06, 0x6c, 0x60, 0x77, 0x76, 0x66,
	0x6e, 0x66, 0x7c, 0x60, 0x66, 0x7c, 0x7c, 0x60, 0x7e, 0x18, 0x06, 0x78, 0x60, 0x7f, 0x7e, 0x66,
	0x6e, 0x66, 0x66, 0x60, 0x66, 0x60, 0x60, 0x6e, 0x66, 0x18, 0x06, 0x78, 0x60, 0x6b, 0x7e, 0x66,
	0x60, 0x7e, 0x66, 0x66, 0x6c, 0x60, 0x60, 0x66, 0x66, 0x18, 0x66, 0x6c, 0x60, 0x63, 0x6e, 0x66,
	0x3e, 0x66, 0x7c, 0x3c, 0x78, 0x7e, 0x60, 0x3e, 0x66, 0x7e, 0x3c, 0x66, 0x7e, 0x63, 0x66, 0x3c,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x7c, 0x3c, 0x7c, 0x3c, 0x7e, 0x66, 0x66, 0x63, 0x66, 0x66, 0x7e, 0x1e, 0x40, 0x78, 0x08, 0x00,
	0x66, 0x66, 0x66, 0x60, 0x18, 0x66, 0x66, 0x63, 0x66, 0x66, 0x0c, 0x18, 0x60, 0x18, 0x1c, 0x00,
	0x66, 0x66, 0x66, 0x3c, 0x18, 0x66, 0x66, 0x6b, 0x3c, 0x3c, 0x18, 0x18, 0x30, 0x18, 0x36, 0x00,
	0x7c, 0x66, 0x7c, 0x06, 0x18, 0x66, 0x66, 0x7f, 0x3c, 0x18, 0x30, 0x18, 0x18, 0x18, 0x63, 0x00,
	0x60, 0x6c, 0x6c, 0x06, 0x18, 0x66, 0x3c, 0x77, 0x66, 0x18, 0x60, 0x18, 0x0c, 0x18, 0x00, 0x00,
	0x60, 0x36, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x63, 0x66, 0x18, 0x7e, 0x1e, 0x06, 0x78, 0x00, 0xff,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x18, 0x00, 0x60, 0x00, 0x06, 0x00, 0x0e, 0x00, 0x60, 0x18, 0x06, 0x60, 0x38, 0x00, 0x00, 0x00,
	0x3c, 0x3c, 0x60, 0x3c, 0x06, 0x3c, 0x18, 0x3e, 0x60, 0x00, 0x00, 0x60, 0x18, 0x66, 0x7c, 0x3c,
	0x7e, 0x06, 0x7c, 0x60, 0x3e, 0x66, 0x3e, 0x66, 0x7c, 0x38, 0x06, 0x6c, 0x18, 0x7f, 0x66, 0x66,
	0x7e, 0x3e, 0x66, 0x60, 0x66, 0x7e, 0x18, 0x66, 0x66, 0x18, 0x06, 0x78, 0x18, 0x7f, 0x66, 0x66,
	0x3c, 0x66, 0x66, 0x60, 0x66, 0x60, 0x18, 0x3e, 0x66, 0x18, 0x06, 0x6c, 0x18, 0x6b, 0x66, 0x66,
	0x18, 0x3e, 0x7c, 0x3c, 0x3e, 0x3c, 0x18, 0x06, 0x66, 0x3c, 0x06, 0x66, 0x3c, 0x63, 0x66, 0x3c,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x08, 0x10,
	0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18,
	0x7c, 0x3e, 0x7c, 0x3e, 0x7e, 0x66, 0x66, 0x63, 0x66, 0x66, 0x7e, 0x3c, 0x18, 0x78, 0x38, 0x1c,
	0x66, 0x66, 0x66, 0x60, 0x18, 0x66, 0x66, 0x6b, 0x3c, 0x66, 0x0c, 0x7e, 0x18, 0x7c, 0x78, 0x1e,
	0x66, 0x66, 0x60, 0x3c, 0x18, 0x66, 0x66, 0x7f, 0x18, 0x66, 0x18, 0x7e, 0x18, 0x6e, 0x38, 0x1c,
	0x7c, 0x3e, 0x60, 0x06, 0x18, 0x66, 0x3c, 0x3e, 0x3c, 0x3e, 0x30, 0x18, 0x18, 0x66, 0x18, 0x18,
	0x60, 0x06, 0x60, 0x7c, 0x0e, 0x3e, 0x18, 0x36, 0x66, 0x0c, 0x7e, 0x3c, 0x18, 0x06, 0x08, 0x10,
	0x60, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
	0xff, 0xe7, 0xfc, 0xe7, 0xe7, 0xff, 0xfc, 0x3f, 0xfe, 0xff, 0x7f, 0xf0, 0x0f, 0x00, 0xff, 0xff,
	0xc9, 0xe7, 0xfc, 0xe7, 0xe7, 0xff, 0xf8, 0x1f, 0xfc, 0xff, 0x3f, 0xf0, 0x0f, 0x00, 0xff, 0xff,
	0x80, 0xe7, 0xfc, 0xe7, 0xe7, 0xff, 0xf1, 0x8f, 0xf8, 0xff, 0x1f, 0xf0, 0x0f, 0xff, 0xff, 0xff,
	0x80, 0xe0, 0xfc, 0x07, 0x07, 0x07, 0xe3, 0xc7, 0xf0, 0xff, 0x0f, 0xf0, 0x0f, 0xff, 0xff, 0xff,
	0xc1, 0xe0, 0xfc, 0x07, 0x07, 0x07, 0xc7, 0xe3, 0xe0, 0xf0, 0x07, 0xff, 0xff, 0xff, 0xff, 0x0f,
	0xe3, 0xe7, 0xfc, 0xff, 0xe7, 0xe7, 0x8f, 0xf1, 0xc0, 0xf0, 0x03, 0xff, 0xff, 0xff, 0xff, 0x0f,
	0xf7, 0xe7, 0xfc, 0xff, 0xe7, 0xe7, 0x1f, 0xf8, 0x80, 0xf0, 0x01, 0xff, 0xff, 0xff, 0x00, 0x0f,
	0xff, 0xe7, 0xfc, 0xff, 0xe7, 0xe7, 0x3f, 0xfc, 0x00, 0xf0, 0x00, 0xff, 0xff, 0xff, 0x00, 0x0f,
	0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0x3f, 0xff, 0xe7, 0x0f, 0xe7, 0x00, 0xff, 0xff, 0xff, 0xff,
	0xe3, 0xff, 0xff, 0xe7, 0xff, 0xff, 0x3f, 0xff, 0xe7, 0x0f, 0xe7, 0x00, 0xe7, 0xe7, 0xe7, 0xe7,
	0xe3, 0xff, 0xff, 0xe7, 0xc3, 0xff, 0x3f, 0xff, 0xe7, 0x0f, 0xe7, 0x00, 0xc3, 0xe7, 0xcf, 0xf3,
	0x88, 0xe0, 0x00, 0x00, 0x81, 0xff, 0x3f, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x81, 0xe7, 0x81, 0x81,
	0x88, 0xe0, 0x00, 0x00, 0x81, 0x00, 0x3f, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0xe7, 0x81, 0xcf, 0xf3,
	0xf7, 0xe7, 0xff, 0xe7, 0x81, 0x00, 0x3f, 0xe7, 0xff, 0x0f, 0xff, 0x00, 0xe7, 0xc3, 0xe7, 0xe7,
	0xe3, 0xe7, 0xff, 0xe7, 0xc3, 0x00, 0x3f, 0xe7, 0xff, 0x0f, 0xff, 0x00, 0xe7, 0xe7, 0xff, 0xff,
	0xff, 0xe7, 0xff, 0xe7, 0xff, 0x00, 0x3f, 0xe7, 0xff, 0x0f, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xe7, 0x99, 0x99, 0xc1, 0x99, 0xc9, 0xe7, 0xf1, 0x8f, 0x99, 0xe7, 0xff, 0xff, 0xff, 0xf9,
	0xff, 0xe7, 0x99, 0x00, 0x9f, 0x93, 0xe3, 0xe7, 0xe3, 0xc7, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xf3,
	0xff, 0xe7, 0x99, 0x99, 0xc3, 0xe7, 0xc7, 0xe7, 0xe7, 0xe7, 0x00, 0x81, 0xff, 0x81, 0xff, 0xe7,
	0xff, 0xe7, 0xff, 0x99, 0xf9, 0xcf, 0x90, 0xff, 0xe7, 0xe7, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xcf,
	0xff, 0xff, 0xff, 0x00, 0x83, 0x99, 0x99, 0xff, 0xe3, 0xc7, 0x99, 0xe7, 0xe7, 0xff, 0xe7, 0x9f,
	0xff, 0xe7, 0xff, 0x99, 0xe7, 0xb9, 0xc4, 0xff, 0xf1, 0x8f, 0xff, 0xff, 0xe7, 0xff, 0xe7, 0xbf,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0x9f, 0xff,
	0xc3, 0xe7, 0xc3, 0x81, 0xf3, 0x81, 0xc3, 0x81, 0xc3, 0xc3, 0xff, 0xff, 0xf3, 0xff, 0xcf, 0xc3,
	0x99, 0xc7, 0x99, 0xf3, 0xe3, 0x9f, 0x9f, 0xf9, 0x99, 0x99, 0xe7, 0xe7, 0xe7, 0x81, 0xe7, 0x99,
	0x91, 0xe7, 0xf3, 0xe7, 0xc3, 0x83, 0x83, 0xf3, 0xc3, 0xc1, 0xe7, 0xe7, 0xcf, 0xff, 0xf3, 0xf3,
	0x89, 0xe7, 0xe7, 0xf3, 0x93, 0xf9, 0x99, 0xe7, 0x99, 0xf9, 0xff, 0xff, 0xe7, 0xff, 0xe7, 0xe7,
	0x99, 0xe7, 0xcf, 0x99, 0x81, 0x99, 0x99, 0xcf, 0x99, 0xf3, 0xe7, 0xe7, 0xf3, 0x81, 0xcf, 0xff,
	0xc3, 0x81, 0x81, 0xc3, 0xf3, 0xc3, 0xc3, 0xcf, 0xc3, 0xc7, 0xe7, 0xe7, 0xf9, 0xff, 0x9f, 0xe7,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xc3, 0xe7, 0x83, 0xc3, 0x87, 0x81, 0x81, 0xc1, 0x99, 0x81, 0xf9, 0x99, 0x9f, 0x9c, 0x99, 0xc3,
	0x99, 0xc3, 0x99, 0x99, 0x93, 0x9f, 0x9f, 0x9f, 0x99, 0xe7, 0xf9, 0x93, 0x9f, 0x88, 0x89, 0x99,
	0x91, 0x99, 0x83, 0x9f, 0x99, 0x83, 0x83, 0x9f, 0x81, 0xe7, 0xf9, 0x87, 0x9f, 0x80, 0x81, 0x99,
	0x91, 0x99, 0x99, 0x9f, 0x99, 0x9f, 0x9f, 0x91, 0x99, 0xe7, 0xf9, 0x87, 0x9f, 0x94, 0x81, 0x99,
	0x9f, 0x81, 0x99, 0x99, 0x93, 0x9f, 0x9f, 0x99, 0x99, 0xe7, 0x99, 0x93, 0x9f, 0x9c, 0x91, 0x99,
	0xc1, 0x99, 0x83, 0xc3, 0x87, 0x81, 0x9f, 0xc1, 0x99, 0x81, 0xc3, 0x99, 0x81, 0x9c, 0x99, 0xc3,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x83, 0xc3, 0x83, 0xc3, 0x81, 0x99, 0x99, 0x9c, 0x99, 0x99, 0x81, 0xe1, 0xbf, 0x87, 0xf7, 0xff,
	0x99, 0x99, 0x99, 0x9f, 0xe7, 0x99, 0x99, 0x9c, 0x99, 0x99, 0xf3, 0xe7, 0x9f, 0xe7, 0xe3, 0xff,
	0x99, 0x99, 0x99, 0xc3, 0xe7, 0x99, 0x99, 0x94, 0xc3, 0xc3, 0xe7, 0xe7, 0xcf, 0xe7, 0xc9, 0xff,
	0x83, 0x99, 0x83, 0xf9, 0xe7, 0x99, 0x99, 0x80, 0xc3, 0xe7, 0xcf, 0xe7, 0xe7, 0xe7, 0x9c, 0xff,
	0x9f, 0x93, 0x93, 0xf9, 0xe7, 0x99, 0xc3, 0x88, 0x99, 0xe7, 0x9f, 0xe7, 0xf3, 0xe7, 0xff, 0xff,
	0x9f, 0xc9, 0x99, 0xc3, 0xe7, 0x81, 0xe7, 0x9c, 0x99, 0xe7, 0x81, 0xe1, 0xf9, 0x87, 0xff, 0x00,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xe7, 0xff, 0x9f, 0xff, 0xf9, 0xff, 0xf1, 0xff, 0x9f, 0xe7, 0xf9, 0x9f, 0xc7, 0xff, 0xff, 0xff,
	0xc3, 0xc3, 0x9f, 0xc3, 0xf9, 0xc3, 0xe7, 0xc1, 0x9f, 0xff, 0xff, 0x9f, 0xe7, 0x99, 0x83, 0xc3,
	0x81, 0xf9, 0x83, 0x9f, 0xc1, 0x99, 0xc1, 0x99, 0x83, 0xc7, 0xf9, 0x93, 0xe7, 0x80, 0x99, 0x99,
	0x81, 0xc1, 0x99, 0x9f, 0x99, 0x81, 0xe7, 0x99, 0x99, 0xe7, 0xf9, 0x87, 0xe7, 0x80, 0x99, 0x99,
	0xc3, 0x99, 0x99, 0x9f, 0x99, 0x9f, 0xe7, 0xc1, 0x99, 0xe7, 0xf9, 0x93, 0xe7, 0x94, 0x99, 0x99,
	0xe7, 0xc1, 0x83, 0xc3, 0xc1, 0xc3, 0xe7, 0xf9, 0x99, 0xc3, 0xf9, 0x99, 0xc3, 0x9c, 0x99, 0xc3,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x83, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xf7, 0xef,
	0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xe7, 0x81, 0xe7, 0xe7,
	0x83, 0xc1, 0x83, 0xc1, 0x81, 0x99, 0x99, 0x9c, 0x99, 0x99, 0x81, 0xc3, 0xe7, 0x87, 0xc7, 0xe3,
	0x99, 0x99, 0x99, 0x9f, 0xe7, 0x99, 0x99, 0x94, 0xc3, 0x99, 0xf3, 0x81, 0xe7, 0x83, 0x87, 0xe1,
	0x99, 0x99, 0x9f, 0xc3, 0xe7, 0x99, 0x99, 0x80, 0xe7, 0x99, 0xe7, 0x81, 0xe7, 0x91, 0xc7, 0xe3,
	0x83, 0xc1, 0x9f, 0xf9, 0xe7, 0x99, 0xc3, 0xc1, 0xc3, 0xc1, 0xcf, 0xe7, 0xe7, 0x99, 0xe7, 0xe7,
	0x9f, 0xf9, 0x9f, 0x83, 0xf1, 0xc1, 0xe7, 0xc9, 0x99, 0xf3, 0x81, 0xc3, 0xe7, 0xf9, 0xf7, 0xef,
	0x9f, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff
};

#pragma warning(pop)

bool get_font_bit(char c, int ox, int oy)
{
	int row = (c >> 4) << 4 << 3;
	int col = c & 0xf;
	bool on = font[row | col | (oy << 4)] & (1 << (7 - ox));
	return on;
}

namespace antavore
{

////////////////////////////////////////////////////////////////
CImprinter::CImprinter()
{
	setMessage(" ");
	m_pInput = new CCircularBuffer();
	m_pOutput = new CCircularBuffer();

	for (int a = 0; a < 8; a++)
	{
		m_Operators[a].setFrequency(15000.0 + (double)a * 187.5 * 2.0);
	}
}

////////////////////////////////////////////////////////////////
CImprinter::~CImprinter()
{
	delete m_pInput;
}

////////////////////////////////////////////////////////////////
void CImprinter::resetGenerator()
{
	m_nLetter = 0;
	m_nColumn = 0;
	m_nTimeout = 100;
}

////////////////////////////////////////////////////////////////
void CImprinter::setMessage(const char *message)
{
	strcpy_s(m_sMessage, 1024, message);
	strcat_s(m_sMessage, 1024, "  ");
	resetGenerator();
}

////////////////////////////////////////////////////////////////
int CImprinter::pushInput(TAudioSample* buffer, int count_samples)
{
	auto outcome = m_pInput->addData(buffer, count_samples);

	while (oneFrame()) {};

	return outcome;
}

////////////////////////////////////////////////////////////////
bool CImprinter::oneFrame()
{
	if (m_pInput->getNumSamples() < CFrame::getLength())
	{
		return false;
	}

	CFrame frame;
	m_pInput->copyToFrame(frame);
	m_pInput->forget(frame.getLength());

	frame.dctFwd();

	if (m_nTimeout == 0)
	{
		for (int a = m_nBand; a < m_nBand + 30; a++) frame.setAt(a, 0.0);

		char c = m_sMessage[m_nLetter];
		int col = (c - ' ') * 4 + m_nColumn;

		if (m_nSubcolumn == 0)
		{
			for (int y = 0; y < 8; y++)
			{
				m_Operators[y].m_TargetVolume = get_font_bit(c, m_nColumn, 7 - y) ? 1.0 : 0.0;
			}

			m_nColumn++;
			if (m_nColumn >= 8)
			{
				m_nColumn = 0;
				m_nLetter++;
				if (m_nLetter >= strlen(m_sMessage))
				{
					m_nLetter = 0;
				}
			}
		}

		m_nSubcolumn++;
		if (m_nSubcolumn == 4) m_nSubcolumn = 0;
	}
	else
	{
		for (int y = 0; y < 8; y++)
		{
			m_Operators[y].m_TargetVolume = 0.0;
		}
		m_nTimeout--;
	}

	frame.dctInv();

	for (int a = 0; a < frame.getLength(); a++)
	{
		double add = 0.0;
		for (int b = 0; b < 8; b++)
		{
			m_Operators[b].fade();
			add += m_Operators[b].getSample(m_Strength);
		}
		frame.getData()[a] += add;
	}

	m_pOutput->mixFrameAtEnd(frame, 0);

	return true;
}

////////////////////////////////////////////////////////////////
bool CImprinter::getOutput(TAudioSample* buffer, int count_samples)
{
	int available = m_pOutput->getNumSamples() - CFrame::getLength() / 2;
	if (available < 0)
	{
		assert(false);
		return false;
	}

	auto *wrt = buffer;
	if (available < count_samples)
	{
		memset(buffer, 0, sizeof(TAudioSample*) * (count_samples - available));
		wrt = buffer + count_samples - available;
	}
	else
	{
		available = count_samples;
	}

	for (int a = 0; a < available; a++)
	{
		m_pOutput->moveFirst(*wrt);
		wrt++;
	}

	return true;
}

}
